// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_ANSLOGIN_PROTOCOLS_H_
#define FLATBUFFERS_GENERATED_ANSLOGIN_PROTOCOLS_H_

#include "flatbuffers/flatbuffers.h"

#include "InfoChannel_generated.h"

namespace Protocols {

struct InfoChannel;

}  // namespace Protocols

namespace Protocols {

struct AnsLogin;

struct AnsLogin FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_CHANNEL = 6
  };
  uint64_t id() const { return GetField<uint64_t>(VT_ID, 0); }
  const Protocols::InfoChannel *channel() const { return GetPointer<const Protocols::InfoChannel *>(VT_CHANNEL); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ID) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_CHANNEL) &&
           verifier.VerifyTable(channel()) &&
           verifier.EndTable();
  }
};

struct AnsLoginBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint64_t id) { fbb_.AddElement<uint64_t>(AnsLogin::VT_ID, id, 0); }
  void add_channel(flatbuffers::Offset<Protocols::InfoChannel> channel) { fbb_.AddOffset(AnsLogin::VT_CHANNEL, channel); }
  AnsLoginBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  AnsLoginBuilder &operator=(const AnsLoginBuilder &);
  flatbuffers::Offset<AnsLogin> Finish() {
    auto o = flatbuffers::Offset<AnsLogin>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<AnsLogin> CreateAnsLogin(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t id = 0,
   flatbuffers::Offset<Protocols::InfoChannel> channel = 0) {
  AnsLoginBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_channel(channel);
  return builder_.Finish();
}

inline const Protocols::AnsLogin *GetAnsLogin(const void *buf) { return flatbuffers::GetRoot<Protocols::AnsLogin>(buf); }

inline bool VerifyAnsLoginBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<Protocols::AnsLogin>(); }

inline void FinishAnsLoginBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<Protocols::AnsLogin> root) { fbb.Finish(root); }

}  // namespace Protocols

#endif  // FLATBUFFERS_GENERATED_ANSLOGIN_PROTOCOLS_H_
